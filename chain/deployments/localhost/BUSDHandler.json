{
  "address": "0x9C2B79624e827f30253A9751F9A528DeD53aCe49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractaddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransactionSuccesful",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "proxyTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc64542c94c495d99e32c41557305da34f6128cf46abf88dd34adf8525f967f9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9C2B79624e827f30253A9751F9A528DeD53aCe49",
    "transactionIndex": 0,
    "gasUsed": "237767",
    "logsBloom": "0x
    "blockHash": "0x4aa66420160a29689d1843bcf31720523d4fb70e49ed68619cd28899fcf48789",
    "transactionHash": "0xbc64542c94c495d99e32c41557305da34f6128cf46abf88dd34adf8525f967f9",
    "logs": [],
    "blockNumber": 4012907,
    "cumulativeGasUsed": "237767",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x29F636D7cBDd0bDe2Ff13cCec74FcC3aAFEeDAc3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c16d04f811d8c9a410fb679612d03cb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransactionSuccesful\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"proxyTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BUSDHandler.sol\":\"BUSDHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/BUSDHandler.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\nerror InsufficientBalance();\\nerror TransactionFailed();\\n\\n\\ncontract BUSDHandler {\\n    \\n    event TransactionSuccesful(address indexed sender, address indexed receiver, uint256 indexed amount );\\n    IERC20 busd;\\n    \\n    constructor(address _contractaddress){\\n        busd = IERC20(_contractaddress);\\n    }\\n\\n    function proxyTransfer(uint amount, address recepient)external{\\n        if(busd.balanceOf(msg.sender) < amount){\\n            revert InsufficientBalance();\\n        }\\n       bool success =  busd.approve(address(this), amount);\\n       if(success){\\n            bool sent = busd.transferFrom(msg.sender,recepient,amount);\\n        if(sent){\\n            emit TransactionSuccesful(msg.sender,recepient,amount);\\n        }else{\\n            revert TransactionFailed();\\n        }\\n       }\\n    }\\n\\n\\n}\",\"keccak256\":\"0x14568216ec3c5beeec7ba571ddbca6a9fbb74cf6b3b229a6d2104120a80b1ed5\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161037838038061037883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6102e5806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631294d09f14610030575b600080fd5b61004361003e366004610231565b610045565b005b6000546040516370a0823160e01b815233600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa15801561008d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b1919061026d565b10156100d057604051631e9acf1760e31b815260040160405180910390fd5b6000805460405163095ea7b360e01b8152306004820152602481018590526001600160a01b039091169063095ea7b3906044016020604051808303816000875af1158015610122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101469190610286565b9050801561022c57600080546040516323b872dd60e01b81523360048201526001600160a01b03858116602483015260448201879052909116906323b872dd906064016020604051808303816000875af11580156101a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cc9190610286565b905080156102115760405184906001600160a01b0385169033907f76c0a3f47f00bad4b8e1d16b8f5a5b101764c346cf66d85ff0c3618ce00884ef90600090a461022a565b6040516317f2c34560e31b815260040160405180910390fd5b505b505050565b6000806040838503121561024457600080fd5b8235915060208301356001600160a01b038116811461026257600080fd5b809150509250929050565b60006020828403121561027f57600080fd5b5051919050565b60006020828403121561029857600080fd5b815180151581146102a857600080fd5b939250505056fea2646970667358221220ca3e7a9e06c13575b634799f94430c7fdd05eff17a06d4e8e655343ac2f2e10064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631294d09f14610030575b600080fd5b61004361003e366004610231565b610045565b005b6000546040516370a0823160e01b815233600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa15801561008d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b1919061026d565b10156100d057604051631e9acf1760e31b815260040160405180910390fd5b6000805460405163095ea7b360e01b8152306004820152602481018590526001600160a01b039091169063095ea7b3906044016020604051808303816000875af1158015610122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101469190610286565b9050801561022c57600080546040516323b872dd60e01b81523360048201526001600160a01b03858116602483015260448201879052909116906323b872dd906064016020604051808303816000875af11580156101a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cc9190610286565b905080156102115760405184906001600160a01b0385169033907f76c0a3f47f00bad4b8e1d16b8f5a5b101764c346cf66d85ff0c3618ce00884ef90600090a461022a565b6040516317f2c34560e31b815260040160405180910390fd5b505b505050565b6000806040838503121561024457600080fd5b8235915060208301356001600160a01b038116811461026257600080fd5b809150509250929050565b60006020828403121561027f57600080fd5b5051919050565b60006020828403121561029857600080fd5b815180151581146102a857600080fd5b939250505056fea2646970667358221220ca3e7a9e06c13575b634799f94430c7fdd05eff17a06d4e8e655343ac2f2e10064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 751,
        "contract": "contracts/BUSDHandler.sol:BUSDHandler",
        "label": "busd",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)664"
      }
    ],
    "types": {
      "t_contract(IERC20)664": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}